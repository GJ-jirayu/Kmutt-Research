<?xml version="1.0" encoding="UTF-8"?>
<!--
	Application context definition for Quiz on Hibernate.
--> 		
			<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:p="http://www.springframework.org/schema/p"
		xmlns:context="http://www.springframework.org/schema/context" 
		xmlns:jdbc="http://www.springframework.org/schema/jdbc" 
		xmlns:jee="http://www.springframework.org/schema/jee" 
		xmlns:tx="http://www.springframework.org/schema/tx"
		xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
			http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.1.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.1.xsd 
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

		

	<!-- ========================= RESOURCE DEFINITIONS ========================= -->

	<!-- Configurer that replaces ${...} placeholders with values from a properties file -->
	<!-- (in this case, JDBC-related settings for the dataSource definition below) -->
	<context:property-placeholder location="classpath:jdbc.properties"/>
	<context:component-scan base-package="com.gl.finwiz.core" />
	<!--
		Uses Apache Commons DBCP for connection pooling. See Commons DBCP documentation
		for the required JAR files. Alternatively you can use another connection pool
		such as C3P0, similarly configured using Spring.
	-->
	<!-- 
		 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"
			p:driverClassName="${jdbc.driverClassName}" p:url="${jdbc.url}" p:username="${jdbc.username}"
		 	 	p:password="${jdbc.password}"/>
	 
	     <!--  
     <jee:jndi-lookup id="dataSource" resource-ref="true" jndi-name="jdbc/missdb"/>
   -->
	<!-- JNDI DataSource for JEE environments -->
	 <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"
	p:dataSource-ref="dataSource" >
  		 <property name="dataSource" ref="dataSource"/>
  		 <property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>		
				<prop key="hibernate.connection.autocommit">false</prop>
				<!-- 
				<prop key="hibernate.hbm2ddl.auto">create</prop>
				 --> 
			</props>	
		</property>
		 <property name="annotatedClasses">
     		<list>
     		<!--  
			 <value>th.co.aoe.makedev.missconsult.hibernate.bean.MissAccount</value>
		 	-->	
			</list>
   		</property>
 	</bean> 	 
	
	<!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->
 	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager"
 		p:sessionFactory-ref="sessionFactory"/>
 	 
	<!-- Transaction manager that delegates to JTA (for a transactional JNDI DataSource) -->
	 <!-- 
	<bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager"/>
  -->
  <!-- 
	 <bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager"
	 p:sessionFactory-ref="sessionFactory"/>
	  -->
	

	<!-- ========================= BUSINESS OBJECT DEFINITIONS ========================= -->

	<!--
		Activates various annotations to be detected in bean classes:
		Spring's @Required and @Autowired, as well as JSR 250's @Resource.
	-->
	<context:annotation-config/>

	<!--
		Instruct Spring to perform declarative transaction management
		automatically on annotated classes.
	-->
	  <!-- 
	<tx:annotation-driven/>
	  -->
	<!--  -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<!--
		Exporter that exposes the Hibernate statistics service via JMX. Autodetects the
		service MBean, using its bean name as JMX object name.
	-->
	<context:mbean-export/> 
 	 <!--  
 	<bean id="missExamService" class="th.co.aoe.makedev.missconsult.hibernate.HibernateMissExam">
		<property name="sessionAnnotationFactory" ref="sessionFactory"></property>	 
	</bean>
	-->

<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="persistenceXmlLocation" value="classpath:META-INF/persistence.xml" />
		<property name="persistenceUnitName" value="HibernatePersistenceUnit" />
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter" ref="jpaVendorAdapter" />
		<property name="jpaDialect" ref="jpaDialect" />
	</bean>

	<bean id="jpaVendorAdapter"
		class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="database" value="HSQL" />
		<property name="databasePlatform" value="org.hibernate.dialect.HSQLDialect" />
	</bean>

	<bean id="jpaDialect" class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" />

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
		<property name="dataSource" ref="dataSource" />
		<property name="jpaDialect" ref="jpaDialect" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />

	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/MC_ASSESSMENT_DB" />
		<property name="username" value="root" />
		<property name="password" value="d" />
	</bean>
</beans>
